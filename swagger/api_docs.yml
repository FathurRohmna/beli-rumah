openapi: "3.0.0"
info:
  title: "Hacktivagram API"
  description: "Hacktivagram API"
  version: "1.0"
servers:
  - url: "http://localhost:8080/api"

paths:
  /users/register:
    post:
      tags:
        - users
      summary: "Save new user data"
      description: "Endpoint to register a new user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  example: "John Doe"
                email:
                  type: "string"
                  example: "john.doe@example.com"
                password:
                  type: "string"
                  example: "example_password"
              required:
                - name
                - email
                - password
      responses:
        201:
          description: "User successfully registered."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User successfully registered."
                  data: 
                    type: "object"
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/login:
    post:
      tags:
        - users
      summary: "Login to get access token"
      description: "Endpoint to login for registered users."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "john.doe"
                password:
                  type: "string"
                  example: "example_password"
              required:
                - email
                - password
      responses:
        200:
          description: "Login successful."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
                    example: "jwt_token_value"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/topup:
    post:
      tags:
        - users
      summary: "Top up user wallet"
      description: "Endpoint to generate a payment request for top-up operations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: "The amount to top up."
                  example: 100000.50
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: "Login successful."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
                    example: "jwt_token_value"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: "#/components/responses/InternalServerError"

  /houses/buyhouse:
    post:
      summary: "Buy a house transaction"
      description: "Handles the purchase of a house, generates a transaction token, and sends a confirmation email."
      tags:
        - "House Transactions"
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                house_id:
                  type: string
                  description: "The ID of the house being purchased."
                  example: "house123"
                start_date:
                  type: string
                  format: date
                  description: "The start date of the transaction."
                  example: "2024-12-20"
                end_date:
                  type: string
                  format: date
                  description: "The end date of the transaction."
                  example: "2024-12-22"
      responses:
        200:
          description: "Transaction successfully completed."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction cancelled"
        500:
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
  
  /houses/transaction/cancel:
    post:
      summary: "Cancel a transaction"
      description: "Cancels a house transaction if it's still pending."
      tags:
        - "Transactions"
      parameters:
        - name: tokenId
          in: query
          required: true
          schema:
            type: string
          description: "JWT token containing user and transaction information."
      responses:
        200:
          description: "Transaction successfully cancelled."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction cancelled"
        401:
          description: "Unauthorized request due to missing or invalid token."
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: "Token is required"
                  message:
                    type: string
                    example: "UNAUTHORIZED"
        500:
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."

  /houses/transaction/confirm:
    post:
      summary: "Confirm a transaction"
      description: "Confirms a house transaction and marks it as sold."
      tags:
        - "Transactions"
      parameters:
        - name: tokenId
          in: query
          required: true
          schema:
            type: string
          description: "JWT token containing user and transaction information."
      responses:
        200:
          description: "Transaction successfully confirmed as sold."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction confirmed as sold"
        401:
          description: "Unauthorized request due to missing or invalid token."
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string
                    example: "Invalid or missing token"
                  message:
                    type: string
                    example: "UNAUTHORIZED"
        500:
          description: "Internal server error."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
  
  /houses:
    get:
      summary: Retrieve a list of houses based on category and location filters
      description: |
        Fetches a list of houses based on the provided filters such as category, location (latitude, longitude),
        pagination (page, limit), and house category.
      parameters:
        - in: query
          name: category
          required: false
          schema:
            type: string
            enum: [apartment, villa, house, residentialComplex]
          description: Filter houses by category
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number for pagination (defaults to 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: The number of houses to return per page (defaults to 10)
      responses:
        '200':
          description: A list of houses matching the criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  houses:
                    type: array
                    items:
                      $ref: '#/components/schemas/House'
                  totalCount:
                    type: integer
                    description: The total number of houses matching the criteria
        '400':
          description: Invalid category or request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message for invalid requests
  /houses/{house_id}:
    get:
      summary: "Fetches the details of a specific house, including its transactions."
      description: "Fetches the detailed information of a house, including its details and associated user house transactions."
      operationId: "getHouseDetailWithTransactions"
      parameters:
        - name: "house_id"
          in: "path"
          description: "Unique identifier of the house"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Successfully fetched house details with transactions."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    description: "Unique identifier for the house"
                  latitude:
                    type: "number"
                    format: "float"
                    description: "Latitude of the house"
                  longitude:
                    type: "number"
                    format: "float"
                    description: "Longitude of the house"
                  address:
                    type: "string"
                    description: "Address of the house"
                  category:
                    type: "string"
                    description: "Category of the house (e.g., apartment, villa)"
                  unit_count:
                    type: "integer"
                    description: "Number of units available in the house"
                  price_per_month:
                    type: "number"
                    format: "float"
                    description: "Price of the house per month"
                  created_at:
                    type: "string"
                    format: "date-time"
                    description: "Creation timestamp of the house entry"
                  updated_at:
                    type: "string"
                    format: "date-time"
                    description: "Last updated timestamp of the house entry"
                  user_house_transactions:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        id:
                          type: "string"
                          description: "Unique identifier for the transaction"
                        user_id:
                          type: "string"
                          description: "ID of the user associated with the transaction"
                        house_id:
                          type: "string"
                          description: "ID of the house involved in the transaction"
                        status:
                          type: "string"
                          description: "Status of the transaction (e.g., active, completed)"
                        start_date:
                          type: "string"
                          format: "date-time"
                          description: "Start date of the transaction"
                        end_date:
                          type: "string"
                          format: "date-time"
                          description: "End date of the transaction"
                        expired_at:
                          type: "string"
                          format: "date-time"
                          description: "Expiry date of the transaction"
        500:
          description: "Internal Server Error, could not fetch house details."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                    example: "could not fetch house details"

components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "string"
          example: "550e8400-e29b-41d4-a716-446655440000"
        full_name:
          type: "string"
          example: "John Doe"
        email:
          type: "string"
          example: "john.doe@example.com"
        username:
          type: "string"
          example: "johndoe"
        age:
          type: "integer"
          example: 25

    Post:
      type: "object"
      properties:
        id:
          type: "string"
          example: "550e8400-e29b-41d4-a716-446655440000"
        user_id:
          type: "string"
          example: "550e8400-e29b-41d4-a716-446655440000"
        content:
          type: "string"
          example: "This is my first post."
        image_url:
          type: "string"
          example: "https://example.com/image.jpg"

    Comment:
      type: "object"
      properties:
        id:
          type: "string"
          example: "550e8400-e29b-41d4-a716-446655440000"
        author_id:
          type: "string"
          example: "550e8400-e29b-41d4-a716-446655440000"
        content:
          type: "string"
          example: "Nice post!"

    Activity:
      type: "object"
      properties:
        activity_id:
          type: "string"
          example: "12345"
        description:
          type: "string"
          example: "User commented on a post."
        timestamp:
          type: "string"
          format: "date-time"
          example: "2024-12-15T08:00:00Z"
        
    House:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the house
        category:
          type: string
          description: The category of the house (e.g., apartment, villa, etc.)
        price:
          type: number
          format: float
          description: The price of the house
        address:
          type: string
          description: The address of the house
        latitude:
          type: number
          format: float
          description: The latitude of the house location
        longitude:
          type: number
          format: float
          description: The longitude of the house location
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
                example: "Invalid password"
              message:
                type: string
                example: "UNAUTHORIZED"
              
    BadRequest:
      description: "bad request error"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: string
                example: "BAD REQUEST"
              info:
                type: "string"
                example: "invalid request parameters"

    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "BAD REQUEST"
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "Name"
                    error:
                      type: string
                      example: "This field is required"
                      
    NotFoundError:
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "NOT FOUND"
              info:
                type: string
                example: "Customer not found"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "INTERNAL SERVER ERROR"
              info:
                type: string
                example: "Unexpected error occurred"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
